/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.jami.daemon;

public class JamiService {
  public static void fini() {
    JamiServiceJNI.fini();
  }

  public static String placeCallWithMedia(String accountId, String to, VectMap mediaList) {
    return JamiServiceJNI.placeCallWithMedia(accountId, to, VectMap.getCPtr(mediaList), mediaList);
  }

  public static boolean requestMediaChange(String accountId, String callId, VectMap mediaList) {
    return JamiServiceJNI.requestMediaChange(accountId, callId, VectMap.getCPtr(mediaList), mediaList);
  }

  public static boolean refuse(String accountId, String callId) {
    return JamiServiceJNI.refuse(accountId, callId);
  }

  public static boolean accept(String accountId, String callId) {
    return JamiServiceJNI.accept(accountId, callId);
  }

  public static boolean acceptWithMedia(String accountId, String callId, VectMap mediaList) {
    return JamiServiceJNI.acceptWithMedia(accountId, callId, VectMap.getCPtr(mediaList), mediaList);
  }

  public static boolean answerMediaChangeRequest(String accountId, String callId, VectMap mediaList) {
    return JamiServiceJNI.answerMediaChangeRequest(accountId, callId, VectMap.getCPtr(mediaList), mediaList);
  }

  public static boolean hangUp(String accountId, String callId) {
    return JamiServiceJNI.hangUp(accountId, callId);
  }

  public static boolean hold(String accountId, String callId) {
    return JamiServiceJNI.hold(accountId, callId);
  }

  public static boolean unhold(String accountId, String callId) {
    return JamiServiceJNI.unhold(accountId, callId);
  }

  public static boolean muteLocalMedia(String accountId, String callId, String mediaType, boolean mute) {
    return JamiServiceJNI.muteLocalMedia(accountId, callId, mediaType, mute);
  }

  public static boolean transfer(String accountId, String callId, String to) {
    return JamiServiceJNI.transfer(accountId, callId, to);
  }

  public static boolean attendedTransfer(String accountId, String transferID, String targetID) {
    return JamiServiceJNI.attendedTransfer(accountId, transferID, targetID);
  }

  public static StringMap getCallDetails(String accountId, String callId) {
    return new StringMap(JamiServiceJNI.getCallDetails(accountId, callId), true);
  }

  public static StringVect getCallList(String accountId) {
    return new StringVect(JamiServiceJNI.getCallList(accountId), true);
  }

  public static boolean joinParticipant(String accountId, String sel_callId, String account2Id, String drag_callId) {
    return JamiServiceJNI.joinParticipant(accountId, sel_callId, account2Id, drag_callId);
  }

  public static void createConfFromParticipantList(String accountId, StringVect participants) {
    JamiServiceJNI.createConfFromParticipantList(accountId, StringVect.getCPtr(participants), participants);
  }

  public static void setConferenceLayout(String accountId, String confId, int layout) {
    JamiServiceJNI.setConferenceLayout(accountId, confId, layout);
  }

  public static void setActiveParticipant(String accountId, String confId, String callId) {
    JamiServiceJNI.setActiveParticipant(accountId, confId, callId);
  }

  public static boolean isConferenceParticipant(String accountId, String callId) {
    return JamiServiceJNI.isConferenceParticipant(accountId, callId);
  }

  public static boolean addParticipant(String accountId, String callId, String account2Id, String confId) {
    return JamiServiceJNI.addParticipant(accountId, callId, account2Id, confId);
  }

  public static boolean addMainParticipant(String accountId, String confId) {
    return JamiServiceJNI.addMainParticipant(accountId, confId);
  }

  public static boolean detachParticipant(String accountId, String callId) {
    return JamiServiceJNI.detachParticipant(accountId, callId);
  }

  public static boolean joinConference(String accountId, String sel_confId, String account2Id, String drag_confId) {
    return JamiServiceJNI.joinConference(accountId, sel_confId, account2Id, drag_confId);
  }

  public static boolean hangUpConference(String accountId, String confId) {
    return JamiServiceJNI.hangUpConference(accountId, confId);
  }

  public static boolean holdConference(String accountId, String confId) {
    return JamiServiceJNI.holdConference(accountId, confId);
  }

  public static boolean unholdConference(String accountId, String confId) {
    return JamiServiceJNI.unholdConference(accountId, confId);
  }

  public static StringVect getConferenceList(String accountId) {
    return new StringVect(JamiServiceJNI.getConferenceList(accountId), true);
  }

  public static StringVect getParticipantList(String accountId, String confId) {
    return new StringVect(JamiServiceJNI.getParticipantList(accountId, confId), true);
  }

  public static String getConferenceId(String accountId, String callId) {
    return JamiServiceJNI.getConferenceId(accountId, callId);
  }

  public static StringMap getConferenceDetails(String accountId, String callId) {
    return new StringMap(JamiServiceJNI.getConferenceDetails(accountId, callId), true);
  }

  public static SWIGTYPE_p_std__vectorT_libjami__MediaMap_t currentMediaList(String accountId, String callId) {
    return new SWIGTYPE_p_std__vectorT_libjami__MediaMap_t(JamiServiceJNI.currentMediaList(accountId, callId), true);
  }

  public static VectMap getConferenceInfos(String accountId, String confId) {
    return new VectMap(JamiServiceJNI.getConferenceInfos(accountId, confId), true);
  }

  public static void setModerator(String accountId, String confId, String peerId, boolean state) {
    JamiServiceJNI.setModerator(accountId, confId, peerId, state);
  }

  public static void muteStream(String accountId, String confId, String accountUri, String deviceId, String streamId, boolean state) {
    JamiServiceJNI.muteStream(accountId, confId, accountUri, deviceId, streamId, state);
  }

  public static void setActiveStream(String accountId, String confId, String accountUri, String deviceId, String streamId, boolean state) {
    JamiServiceJNI.setActiveStream(accountId, confId, accountUri, deviceId, streamId, state);
  }

  public static void hangupParticipant(String accountId, String confId, String accountUri, String deviceId) {
    JamiServiceJNI.hangupParticipant(accountId, confId, accountUri, deviceId);
  }

  public static void raiseHand(String accountId, String confId, String accountUri, String deviceId, boolean state) {
    JamiServiceJNI.raiseHand(accountId, confId, accountUri, deviceId, state);
  }

  public static void muteParticipant(String accountId, String confId, String peerId, boolean state) {
    JamiServiceJNI.muteParticipant(accountId, confId, peerId, state);
  }

  public static void raiseParticipantHand(String accountId, String confId, String peerId, boolean state) {
    JamiServiceJNI.raiseParticipantHand(accountId, confId, peerId, state);
  }

  public static boolean startRecordedFilePlayback(String filepath) {
    return JamiServiceJNI.startRecordedFilePlayback(filepath);
  }

  public static void stopRecordedFilePlayback() {
    JamiServiceJNI.stopRecordedFilePlayback();
  }

  public static boolean toggleRecording(String accountId, String callId) {
    return JamiServiceJNI.toggleRecording(accountId, callId);
  }

  public static void setRecording(String accountId, String callId) {
    JamiServiceJNI.setRecording(accountId, callId);
  }

  public static void recordPlaybackSeek(double value) {
    JamiServiceJNI.recordPlaybackSeek(value);
  }

  public static boolean getIsRecording(String accountId, String callId) {
    return JamiServiceJNI.getIsRecording(accountId, callId);
  }

  public static void playDTMF(String key) {
    JamiServiceJNI.playDTMF(key);
  }

  public static void startTone(int start, int type) {
    JamiServiceJNI.startTone(start, type);
  }

  public static boolean switchInput(String accountId, String callId, String resource) {
    return JamiServiceJNI.switchInput(accountId, callId, resource);
  }

  public static void sendTextMessage(String accountId, String callId, StringMap messages, String from, boolean isMixed) {
    JamiServiceJNI.sendTextMessage(accountId, callId, StringMap.getCPtr(messages), messages, from, isMixed);
  }

  public static StringMap getAccountDetails(String accountID) {
    return new StringMap(JamiServiceJNI.getAccountDetails(accountID), true);
  }

  public static StringMap getVolatileAccountDetails(String accountID) {
    return new StringMap(JamiServiceJNI.getVolatileAccountDetails(accountID), true);
  }

  public static void setAccountDetails(String accountID, StringMap details) {
    JamiServiceJNI.setAccountDetails(accountID, StringMap.getCPtr(details), details);
  }

  public static void setAccountActive(String accountID, boolean active) {
    JamiServiceJNI.setAccountActive(accountID, active);
  }

  public static StringMap getAccountTemplate(String accountType) {
    return new StringMap(JamiServiceJNI.getAccountTemplate(accountType), true);
  }

  public static void monitor(boolean continuous) {
    JamiServiceJNI.monitor(continuous);
  }

  public static String addAccount(StringMap details) {
    return JamiServiceJNI.addAccount(StringMap.getCPtr(details), details);
  }

  public static void removeAccount(String accountID) {
    JamiServiceJNI.removeAccount(accountID);
  }

  public static StringVect getAccountList() {
    return new StringVect(JamiServiceJNI.getAccountList(), true);
  }

  public static void sendRegister(String accountID, boolean enable) {
    JamiServiceJNI.sendRegister(accountID, enable);
  }

  public static void registerAllAccounts() {
    JamiServiceJNI.registerAllAccounts();
  }

  public static long sendAccountTextMessage(String accountID, String to, StringMap message, int flag) {
    return JamiServiceJNI.sendAccountTextMessage(accountID, to, StringMap.getCPtr(message), message, flag);
  }

  public static MessageVect getLastMessages(String accountID, long base_timestamp) {
    return new MessageVect(JamiServiceJNI.getLastMessages(accountID, base_timestamp), true);
  }

  public static int getMessageStatus(long id) {
    return JamiServiceJNI.getMessageStatus__SWIG_0(id);
  }

  public static int getMessageStatus(String accountID, long id) {
    return JamiServiceJNI.getMessageStatus__SWIG_1(accountID, id);
  }

  public static boolean cancelMessage(String accountID, long id) {
    return JamiServiceJNI.cancelMessage(accountID, id);
  }

  public static void setIsComposing(String accountID, String conversationUri, boolean isWriting) {
    JamiServiceJNI.setIsComposing(accountID, conversationUri, isWriting);
  }

  public static boolean setMessageDisplayed(String accountID, String conversationUri, String messageId, int status) {
    return JamiServiceJNI.setMessageDisplayed(accountID, conversationUri, messageId, status);
  }

  public static boolean changeAccountPassword(String accountID, String password_old, String password_new) {
    return JamiServiceJNI.changeAccountPassword(accountID, password_old, password_new);
  }

  public static boolean lookupName(String account, String nameserver, String name) {
    return JamiServiceJNI.lookupName(account, nameserver, name);
  }

  public static boolean lookupAddress(String account, String nameserver, String address) {
    return JamiServiceJNI.lookupAddress(account, nameserver, address);
  }

  public static boolean registerName(String account, String password, String name) {
    return JamiServiceJNI.registerName(account, password, name);
  }

  public static boolean searchUser(String account, String query) {
    return JamiServiceJNI.searchUser(account, query);
  }

  public static UintVect getCodecList() {
    return new UintVect(JamiServiceJNI.getCodecList(), true);
  }

  public static StringVect getSupportedTlsMethod() {
    return new StringVect(JamiServiceJNI.getSupportedTlsMethod(), true);
  }

  public static StringVect getSupportedCiphers(String accountID) {
    return new StringVect(JamiServiceJNI.getSupportedCiphers(accountID), true);
  }

  public static StringMap getCodecDetails(String accountID, long codecId) {
    return new StringMap(JamiServiceJNI.getCodecDetails(accountID, codecId), true);
  }

  public static boolean setCodecDetails(String accountID, long codecId, StringMap details) {
    return JamiServiceJNI.setCodecDetails(accountID, codecId, StringMap.getCPtr(details), details);
  }

  public static UintVect getActiveCodecList(String accountID) {
    return new UintVect(JamiServiceJNI.getActiveCodecList(accountID), true);
  }

  public static boolean exportOnRing(String accountID, String password) {
    return JamiServiceJNI.exportOnRing(accountID, password);
  }

  public static boolean exportToFile(String accountID, String destinationPath, String password) {
    return JamiServiceJNI.exportToFile(accountID, destinationPath, password);
  }

  public static StringMap getKnownRingDevices(String accountID) {
    return new StringMap(JamiServiceJNI.getKnownRingDevices(accountID), true);
  }

  public static boolean revokeDevice(String accountID, String password, String deviceID) {
    return JamiServiceJNI.revokeDevice(accountID, password, deviceID);
  }

  public static void setActiveCodecList(String accountID, UintVect list) {
    JamiServiceJNI.setActiveCodecList(accountID, UintVect.getCPtr(list), list);
  }

  public static VectMap getActiveCalls(String accountId, String convId) {
    return new VectMap(JamiServiceJNI.getActiveCalls(accountId, convId), true);
  }

  public static StringVect getAudioPluginList() {
    return new StringVect(JamiServiceJNI.getAudioPluginList(), true);
  }

  public static void setAudioPlugin(String audioPlugin) {
    JamiServiceJNI.setAudioPlugin(audioPlugin);
  }

  public static StringVect getAudioOutputDeviceList() {
    return new StringVect(JamiServiceJNI.getAudioOutputDeviceList(), true);
  }

  public static void setAudioOutputDevice(int index) {
    JamiServiceJNI.setAudioOutputDevice(index);
  }

  public static void setAudioInputDevice(int index) {
    JamiServiceJNI.setAudioInputDevice(index);
  }

  public static void setAudioRingtoneDevice(int index) {
    JamiServiceJNI.setAudioRingtoneDevice(index);
  }

  public static StringVect getAudioInputDeviceList() {
    return new StringVect(JamiServiceJNI.getAudioInputDeviceList(), true);
  }

  public static StringVect getCurrentAudioDevicesIndex() {
    return new StringVect(JamiServiceJNI.getCurrentAudioDevicesIndex(), true);
  }

  public static int getAudioInputDeviceIndex(String name) {
    return JamiServiceJNI.getAudioInputDeviceIndex(name);
  }

  public static int getAudioOutputDeviceIndex(String name) {
    return JamiServiceJNI.getAudioOutputDeviceIndex(name);
  }

  public static String getCurrentAudioOutputPlugin() {
    return JamiServiceJNI.getCurrentAudioOutputPlugin();
  }

  public static String getNoiseSuppressState() {
    return JamiServiceJNI.getNoiseSuppressState();
  }

  public static void setNoiseSuppressState(String state) {
    JamiServiceJNI.setNoiseSuppressState(state);
  }

  public static boolean isAgcEnabled() {
    return JamiServiceJNI.isAgcEnabled();
  }

  public static void setAgcState(boolean enabled) {
    JamiServiceJNI.setAgcState(enabled);
  }

  public static void muteDtmf(boolean mute) {
    JamiServiceJNI.muteDtmf(mute);
  }

  public static boolean isDtmfMuted() {
    return JamiServiceJNI.isDtmfMuted();
  }

  public static boolean isCaptureMuted() {
    return JamiServiceJNI.isCaptureMuted();
  }

  public static void muteCapture(boolean mute) {
    JamiServiceJNI.muteCapture(mute);
  }

  public static boolean isPlaybackMuted() {
    return JamiServiceJNI.isPlaybackMuted();
  }

  public static void mutePlayback(boolean mute) {
    JamiServiceJNI.mutePlayback(mute);
  }

  public static boolean isRingtoneMuted() {
    return JamiServiceJNI.isRingtoneMuted();
  }

  public static void muteRingtone(boolean mute) {
    JamiServiceJNI.muteRingtone(mute);
  }

  public static String getAudioManager() {
    return JamiServiceJNI.getAudioManager();
  }

  public static boolean setAudioManager(String api) {
    return JamiServiceJNI.setAudioManager(api);
  }

  public static String getRecordPath() {
    return JamiServiceJNI.getRecordPath();
  }

  public static void setRecordPath(String recPath) {
    JamiServiceJNI.setRecordPath(recPath);
  }

  public static boolean getIsAlwaysRecording() {
    return JamiServiceJNI.getIsAlwaysRecording();
  }

  public static void setIsAlwaysRecording(boolean rec) {
    JamiServiceJNI.setIsAlwaysRecording(rec);
  }

  public static boolean getRecordPreview() {
    return JamiServiceJNI.getRecordPreview();
  }

  public static void setRecordPreview(boolean rec) {
    JamiServiceJNI.setRecordPreview(rec);
  }

  public static int getRecordQuality() {
    return JamiServiceJNI.getRecordQuality();
  }

  public static void setRecordQuality(int rec) {
    JamiServiceJNI.setRecordQuality(rec);
  }

  public static void setHistoryLimit(int days) {
    JamiServiceJNI.setHistoryLimit(days);
  }

  public static int getHistoryLimit() {
    return JamiServiceJNI.getHistoryLimit();
  }

  public static void setRingingTimeout(int timeout) {
    JamiServiceJNI.setRingingTimeout(timeout);
  }

  public static int getRingingTimeout() {
    return JamiServiceJNI.getRingingTimeout();
  }

  public static void setAccountsOrder(String order) {
    JamiServiceJNI.setAccountsOrder(order);
  }

  public static VectMap getCredentials(String accountID) {
    return new VectMap(JamiServiceJNI.getCredentials(accountID), true);
  }

  public static void setCredentials(String accountID, VectMap details) {
    JamiServiceJNI.setCredentials(accountID, VectMap.getCPtr(details), details);
  }

  public static String getAddrFromInterfaceName(String _interface) {
    return JamiServiceJNI.getAddrFromInterfaceName(_interface);
  }

  public static StringVect getAllIpInterface() {
    return new StringVect(JamiServiceJNI.getAllIpInterface(), true);
  }

  public static StringVect getAllIpInterfaceByName() {
    return new StringVect(JamiServiceJNI.getAllIpInterfaceByName(), true);
  }

  public static void setVolume(String device, double value) {
    JamiServiceJNI.setVolume(device, value);
  }

  public static double getVolume(String device) {
    return JamiServiceJNI.getVolume(device);
  }

  public static StringMap validateCertificatePath(String accountId, String certificate, String privateKey, String privateKeyPassword, String caList) {
    return new StringMap(JamiServiceJNI.validateCertificatePath(accountId, certificate, privateKey, privateKeyPassword, caList), true);
  }

  public static StringMap validateCertificate(String accountId, String certificate) {
    return new StringMap(JamiServiceJNI.validateCertificate(accountId, certificate), true);
  }

  public static StringMap getCertificateDetails(String accountId, String certificate) {
    return new StringMap(JamiServiceJNI.getCertificateDetails(accountId, certificate), true);
  }

  public static StringMap getCertificateDetailsPath(String accountId, String certificate, String privateKey, String privateKeyPass) {
    return new StringMap(JamiServiceJNI.getCertificateDetailsPath(accountId, certificate, privateKey, privateKeyPass), true);
  }

  public static StringVect getPinnedCertificates(String accountId) {
    return new StringVect(JamiServiceJNI.getPinnedCertificates(accountId), true);
  }

  public static StringVect pinCertificate(String accountId, Blob certificate, boolean local) {
    return new StringVect(JamiServiceJNI.pinCertificate(accountId, Blob.getCPtr(certificate), certificate, local), true);
  }

  public static boolean unpinCertificate(String accountId, String certId) {
    return JamiServiceJNI.unpinCertificate(accountId, certId);
  }

  public static void pinCertificatePath(String accountId, String path) {
    JamiServiceJNI.pinCertificatePath(accountId, path);
  }

  public static long unpinCertificatePath(String accountId, String path) {
    return JamiServiceJNI.unpinCertificatePath(accountId, path);
  }

  public static boolean pinRemoteCertificate(String accountId, String certId) {
    return JamiServiceJNI.pinRemoteCertificate(accountId, certId);
  }

  public static boolean setCertificateStatus(String account, String certId, String status) {
    return JamiServiceJNI.setCertificateStatus(account, certId, status);
  }

  public static StringVect getCertificatesByStatus(String account, String status) {
    return new StringVect(JamiServiceJNI.getCertificatesByStatus(account, status), true);
  }

  public static VectMap getTrustRequests(String accountId) {
    return new VectMap(JamiServiceJNI.getTrustRequests(accountId), true);
  }

  public static boolean acceptTrustRequest(String accountId, String from) {
    return JamiServiceJNI.acceptTrustRequest(accountId, from);
  }

  public static boolean discardTrustRequest(String accountId, String from) {
    return JamiServiceJNI.discardTrustRequest(accountId, from);
  }

  public static void sendTrustRequest(String accountId, String to, Blob payload) {
    JamiServiceJNI.sendTrustRequest(accountId, to, Blob.getCPtr(payload), payload);
  }

  public static void addContact(String accountId, String uri) {
    JamiServiceJNI.addContact(accountId, uri);
  }

  public static void removeContact(String accountId, String uri, boolean ban) {
    JamiServiceJNI.removeContact(accountId, uri, ban);
  }

  public static VectMap getContacts(String accountId) {
    return new VectMap(JamiServiceJNI.getContacts(accountId), true);
  }

  public static StringMap getContactDetails(String accountId, String uri) {
    return new StringMap(JamiServiceJNI.getContactDetails(accountId, uri), true);
  }

  public static void connectivityChanged() {
    JamiServiceJNI.connectivityChanged();
  }

  public static void setPushNotificationConfig(StringMap pushConfig) {
    JamiServiceJNI.setPushNotificationConfig(StringMap.getCPtr(pushConfig), pushConfig);
  }

  public static void setPushNotificationToken(String pushDeviceToken) {
    JamiServiceJNI.setPushNotificationToken(pushDeviceToken);
  }

  public static void pushNotificationReceived(String from, StringMap data) {
    JamiServiceJNI.pushNotificationReceived(from, StringMap.getCPtr(data), data);
  }

  public static boolean isAudioMeterActive(String id) {
    return JamiServiceJNI.isAudioMeterActive(id);
  }

  public static void setAudioMeterState(String id, boolean state) {
    JamiServiceJNI.setAudioMeterState(id, state);
  }

  public static void setDefaultModerator(String accountID, String peerURI, boolean state) {
    JamiServiceJNI.setDefaultModerator(accountID, peerURI, state);
  }

  public static StringVect getDefaultModerators(String accountID) {
    return new StringVect(JamiServiceJNI.getDefaultModerators(accountID), true);
  }

  public static void enableLocalModerators(String accountID, boolean isModEnabled) {
    JamiServiceJNI.enableLocalModerators(accountID, isModEnabled);
  }

  public static boolean isLocalModeratorsEnabled(String accountID) {
    return JamiServiceJNI.isLocalModeratorsEnabled(accountID);
  }

  public static void setAllModerators(String accountID, boolean allModerators) {
    JamiServiceJNI.setAllModerators(accountID, allModerators);
  }

  public static boolean isAllModerators(String accountID) {
    return JamiServiceJNI.isAllModerators(accountID);
  }

  public static void sendFile(String accountId, String conversationId, String path, String displayName, String replyTo) {
    JamiServiceJNI.sendFile(accountId, conversationId, path, displayName, replyTo);
  }

  public static long downloadFile(String accountId, String conversationId, String interactionId, String fileId, String path) {
    return JamiServiceJNI.downloadFile(accountId, conversationId, interactionId, fileId, path);
  }

  public static long cancelDataTransfer(String accountId, String conversationId, String fileId) {
    return JamiServiceJNI.cancelDataTransfer(accountId, conversationId, fileId);
  }

  public static long fileTransferInfo(String accountId, String conversationId, String fileId, String[] path_out, long[] total_out, long[] progress_out) {
    return JamiServiceJNI.fileTransferInfo(accountId, conversationId, fileId, path_out, total_out, progress_out);
  }

  public static void publish(String accountID, boolean status, String note) {
    JamiServiceJNI.publish(accountID, status, note);
  }

  public static void answerServerRequest(String uri, boolean flag) {
    JamiServiceJNI.answerServerRequest(uri, flag);
  }

  public static void subscribeBuddy(String accountID, String uri, boolean flag) {
    JamiServiceJNI.subscribeBuddy(accountID, uri, flag);
  }

  public static VectMap getSubscriptions(String accountID) {
    return new VectMap(JamiServiceJNI.getSubscriptions(accountID), true);
  }

  public static void setSubscriptions(String accountID, StringVect uris) {
    JamiServiceJNI.setSubscriptions(accountID, StringVect.getCPtr(uris), uris);
  }

  public static void setVideoFrame(byte[] arg0, int arg1, long arg2, int arg3, int arg4, int arg5) {
    JamiServiceJNI.setVideoFrame(arg0, arg1, arg2, arg3, arg4, arg5);
  }

  public static long acquireNativeWindow(java.lang.Object arg0) {
    return JamiServiceJNI.acquireNativeWindow(arg0);
  }

  public static void releaseNativeWindow(long arg0) {
    JamiServiceJNI.releaseNativeWindow(arg0);
  }

  public static void setNativeWindowGeometry(long arg0, int arg1, int arg2) {
    JamiServiceJNI.setNativeWindowGeometry(arg0, arg1, arg2);
  }

  public static boolean registerVideoCallback(String arg0, long arg1) {
    return JamiServiceJNI.registerVideoCallback(arg0, arg1);
  }

  public static void unregisterVideoCallback(String arg0, long arg1) {
    JamiServiceJNI.unregisterVideoCallback(arg0, arg1);
  }

  public static void captureVideoFrame(String arg0, java.lang.Object arg1, int arg2) {
    JamiServiceJNI.captureVideoFrame(arg0, arg1, arg2);
  }

  public static void captureVideoPacket(String arg0, java.lang.Object arg1, int arg2, int arg3, boolean arg4, long arg5, int arg6) {
    JamiServiceJNI.captureVideoPacket(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
  }

  public static void setDefaultDevice(String name) {
    JamiServiceJNI.setDefaultDevice(name);
  }

  public static String getDefaultDevice() {
    return JamiServiceJNI.getDefaultDevice();
  }

  public static void startAudioDevice() {
    JamiServiceJNI.startAudioDevice();
  }

  public static void stopAudioDevice() {
    JamiServiceJNI.stopAudioDevice();
  }

  public static StringMap getSettings(String name) {
    return new StringMap(JamiServiceJNI.getSettings(name), true);
  }

  public static void applySettings(String name, StringMap settings) {
    JamiServiceJNI.applySettings(name, StringMap.getCPtr(settings), settings);
  }

  public static void addVideoDevice(String node) {
    JamiServiceJNI.addVideoDevice(node);
  }

  public static void removeVideoDevice(String node) {
    JamiServiceJNI.removeVideoDevice(node);
  }

  public static void setDeviceOrientation(String name, int angle) {
    JamiServiceJNI.setDeviceOrientation(name, angle);
  }

  public static boolean registerSinkTarget(String sinkId, SWIGTYPE_p_libjami__SinkTarget target) {
    return JamiServiceJNI.registerSinkTarget(sinkId, SWIGTYPE_p_libjami__SinkTarget.getCPtr(target));
  }

  public static String startLocalMediaRecorder(String videoInputId, String filepath) {
    return JamiServiceJNI.startLocalMediaRecorder(videoInputId, filepath);
  }

  public static void stopLocalRecorder(String filepath) {
    JamiServiceJNI.stopLocalRecorder(filepath);
  }

  public static boolean getDecodingAccelerated() {
    return JamiServiceJNI.getDecodingAccelerated();
  }

  public static void setDecodingAccelerated(boolean state) {
    JamiServiceJNI.setDecodingAccelerated(state);
  }

  public static boolean getEncodingAccelerated() {
    return JamiServiceJNI.getEncodingAccelerated();
  }

  public static void setEncodingAccelerated(boolean state) {
    JamiServiceJNI.setEncodingAccelerated(state);
  }

  public static String openVideoInput(String path) {
    return JamiServiceJNI.openVideoInput(path);
  }

  public static boolean closeVideoInput(String id) {
    return JamiServiceJNI.closeVideoInput(id);
  }

  public static boolean loadPlugin(String path) {
    return JamiServiceJNI.loadPlugin(path);
  }

  public static boolean unloadPlugin(String path) {
    return JamiServiceJNI.unloadPlugin(path);
  }

  public static StringMap getPluginDetails(String path) {
    return new StringMap(JamiServiceJNI.getPluginDetails(path), true);
  }

  public static VectMap getPluginPreferences(String path, String accountId) {
    return new VectMap(JamiServiceJNI.getPluginPreferences(path, accountId), true);
  }

  public static boolean setPluginPreference(String path, String accountId, String key, String value) {
    return JamiServiceJNI.setPluginPreference(path, accountId, key, value);
  }

  public static StringMap getPluginPreferencesValues(String path, String accountId) {
    return new StringMap(JamiServiceJNI.getPluginPreferencesValues(path, accountId), true);
  }

  public static boolean resetPluginPreferencesValues(String path, String accountId) {
    return JamiServiceJNI.resetPluginPreferencesValues(path, accountId);
  }

  public static StringVect getInstalledPlugins() {
    return new StringVect(JamiServiceJNI.getInstalledPlugins(), true);
  }

  public static StringVect getLoadedPlugins() {
    return new StringVect(JamiServiceJNI.getLoadedPlugins(), true);
  }

  public static int installPlugin(String jplPath, boolean force) {
    return JamiServiceJNI.installPlugin(jplPath, force);
  }

  public static int uninstallPlugin(String pluginRootPath) {
    return JamiServiceJNI.uninstallPlugin(pluginRootPath);
  }

  public static StringVect getCallMediaHandlers() {
    return new StringVect(JamiServiceJNI.getCallMediaHandlers(), true);
  }

  public static StringVect getChatHandlers() {
    return new StringVect(JamiServiceJNI.getChatHandlers(), true);
  }

  public static void toggleCallMediaHandler(String mediaHandlerId, String callId, boolean toggle) {
    JamiServiceJNI.toggleCallMediaHandler(mediaHandlerId, callId, toggle);
  }

  public static void toggleChatHandler(String chatHandlerId, String accountId, String peerId, boolean toggle) {
    JamiServiceJNI.toggleChatHandler(chatHandlerId, accountId, peerId, toggle);
  }

  public static StringMap getCallMediaHandlerDetails(String mediaHandlerId) {
    return new StringMap(JamiServiceJNI.getCallMediaHandlerDetails(mediaHandlerId), true);
  }

  public static StringVect getCallMediaHandlerStatus(String callId) {
    return new StringVect(JamiServiceJNI.getCallMediaHandlerStatus(callId), true);
  }

  public static StringMap getChatHandlerDetails(String chatHandlerId) {
    return new StringMap(JamiServiceJNI.getChatHandlerDetails(chatHandlerId), true);
  }

  public static StringVect getChatHandlerStatus(String accountId, String peerId) {
    return new StringVect(JamiServiceJNI.getChatHandlerStatus(accountId, peerId), true);
  }

  public static boolean getPluginsEnabled() {
    return JamiServiceJNI.getPluginsEnabled();
  }

  public static void setPluginsEnabled(boolean state) {
    JamiServiceJNI.setPluginsEnabled(state);
  }

  public static String startConversation(String accountId) {
    return JamiServiceJNI.startConversation(accountId);
  }

  public static void acceptConversationRequest(String accountId, String conversationId) {
    JamiServiceJNI.acceptConversationRequest(accountId, conversationId);
  }

  public static void declineConversationRequest(String accountId, String conversationId) {
    JamiServiceJNI.declineConversationRequest(accountId, conversationId);
  }

  public static boolean removeConversation(String accountId, String conversationId) {
    return JamiServiceJNI.removeConversation(accountId, conversationId);
  }

  public static StringVect getConversations(String accountId) {
    return new StringVect(JamiServiceJNI.getConversations(accountId), true);
  }

  public static VectMap getConversationRequests(String accountId) {
    return new VectMap(JamiServiceJNI.getConversationRequests(accountId), true);
  }

  public static void updateConversationInfos(String accountId, String conversationId, StringMap infos) {
    JamiServiceJNI.updateConversationInfos(accountId, conversationId, StringMap.getCPtr(infos), infos);
  }

  public static StringMap conversationInfos(String accountId, String conversationId) {
    return new StringMap(JamiServiceJNI.conversationInfos(accountId, conversationId), true);
  }

  public static void setConversationPreferences(String accountId, String conversationId, StringMap prefs) {
    JamiServiceJNI.setConversationPreferences(accountId, conversationId, StringMap.getCPtr(prefs), prefs);
  }

  public static StringMap getConversationPreferences(String accountId, String conversationId) {
    return new StringMap(JamiServiceJNI.getConversationPreferences(accountId, conversationId), true);
  }

  public static void addConversationMember(String accountId, String conversationId, String contactUri) {
    JamiServiceJNI.addConversationMember(accountId, conversationId, contactUri);
  }

  public static void removeConversationMember(String accountId, String conversationId, String contactUri) {
    JamiServiceJNI.removeConversationMember(accountId, conversationId, contactUri);
  }

  public static VectMap getConversationMembers(String accountId, String conversationId) {
    return new VectMap(JamiServiceJNI.getConversationMembers(accountId, conversationId), true);
  }

  public static void sendMessage(String accountId, String conversationId, String message, String replyTo, int flag) {
    JamiServiceJNI.sendMessage(accountId, conversationId, message, replyTo, flag);
  }

  public static long loadConversationMessages(String accountId, String conversationId, String fromMessage, long n) {
    return JamiServiceJNI.loadConversationMessages(accountId, conversationId, fromMessage, n);
  }

  public static long loadConversationUntil(String accountId, String conversationId, String fromMessage, String toMessage) {
    return JamiServiceJNI.loadConversationUntil(accountId, conversationId, fromMessage, toMessage);
  }

  public static long countInteractions(String accountId, String conversationId, String toId, String fromId, String authorUri) {
    return JamiServiceJNI.countInteractions(accountId, conversationId, toId, fromId, authorUri);
  }

  public static long searchConversation(String accountId, String conversationId, String author, String lastId, String regexSearch, String type, long after, long before, long maxResult, int flag) {
    return JamiServiceJNI.searchConversation(accountId, conversationId, author, lastId, regexSearch, type, after, before, maxResult, flag);
  }

  public static void init(ConfigurationCallback confM, Callback callM, PresenceCallback presM, DataTransferCallback dataM, VideoCallback videoM, ConversationCallback convM) {
    JamiServiceJNI.init(ConfigurationCallback.getCPtr(confM), confM, Callback.getCPtr(callM), callM, PresenceCallback.getCPtr(presM), presM, DataTransferCallback.getCPtr(dataM), dataM, VideoCallback.getCPtr(videoM), videoM, ConversationCallback.getCPtr(convM), convM);
  }

}
